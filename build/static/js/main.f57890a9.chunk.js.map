{"version":3,"sources":["setup/FocusDuration.js","setup/BreakDuration.js","setup/DemoSettings.js","setup/Setup.js","controls/Controls.js","utils/class-names/index.js","feedback/Feedback.js","pomodoro/Pomodoro.js","utils/duration/index.js","utils/useInterval/index.js","App.js","index.js"],"names":["FocusDuration","decrement","increment","displayDuration","focusDuration","currentMode","className","data-testid","onClick","type","disabled","BreakDuration","breakDuration","DemoSettings","demoSettings","title","Setup","Controls","classNameToBoolean","playPause","isTimerRunning","stopTimer","role","aria-label","oi","Object","entries","reduce","classes","value","concat","undefined","filter","join","Feedback","remainingTime","status","duration","remainingDuration","isPaused","progress","durationTimeUnit","style","height","aria-valuemin","aria-valuemax","aria-valuenow","width","Pomodoro","useState","set","min","max","timerState","setTimerState","setIsTimerRunning","limitAdjust","newTime","adjust","mode","adjustBy","givenMinutes","minutes","Math","floor","toString","padStart","minutesToDuration","givenSeconds","seconds","round","secondsToDuration","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","Audio","play","otherMode","breaking","focusing","otherDuration","prevState","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f57890a9.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction FocusDuration({\n  decrement,\n  increment,\n  displayDuration,\n  focusDuration,\n  currentMode,\n}) {\n  return (\n    <div className=\"col\">\n      <div className=\"input-group input-group-lg mb-2\">\n        <span className=\"input-group-text\" data-testid=\"duration-focus\">\n          Focus Duration: {displayDuration(focusDuration)}\n        </span>\n        <div className=\"input-group-append\">\n          <button\n            onClick={() => decrement(\"focusDuration\", -300)}\n            type=\"button\"\n            className=\"btn btn-secondary\"\n            data-testid=\"decrease-focus\"\n            disabled={currentMode}\n          >\n            <span className=\"oi oi-minus\" />\n          </button>\n          <button\n            onClick={() => increment(\"focusDuration\", 300)}\n            type=\"button\"\n            className=\"btn btn-secondary\"\n            data-testid=\"increase-focus\"\n            disabled={currentMode}\n          >\n            <span className=\"oi oi-plus\" />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default FocusDuration;\n","import React from \"react\";\n\nfunction BreakDuration({\n  decrement,\n  increment,\n  displayDuration,\n  breakDuration,\n  currentMode,\n}) {\n  return (\n    <div className=\"col\">\n      <div className=\"float-right\">\n        <div className=\"input-group input-group-lg mb-2\">\n          <span className=\"input-group-text\" data-testid=\"duration-break\">\n            Break Duration: {displayDuration(breakDuration)}\n          </span>\n          <div className=\"input-group-append\">\n            <button\n              onClick={() => decrement(\"breakDuration\", -60)}\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              data-testid=\"decrease-break\"\n              disabled={currentMode}\n            >\n              <span className=\"oi oi-minus\" />\n            </button>\n            <button\n              onClick={() => increment(\"breakDuration\", 60)}\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              data-testid=\"increase-break\"\n              disabled={currentMode}\n            >\n              <span className=\"oi oi-plus\" />\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default BreakDuration;\n","import React from \"react\";\n\nfunction DemoSettings({ demoSettings, currentMode }) {\n  return (\n    <div className=\"col\">\n      <div className=\"mb-4\">\n        <button\n          type=\"button\"\n          className=\"btn-sm btn-outline-info\"\n          title=\"Start Demo Mode\"\n          disabled={currentMode}\n          onClick={() => demoSettings()}\n        >\n          <span>toggle demo mode</span>\n        </button>\n      </div>\n    </div>\n  );\n}\nexport default DemoSettings;\n","import React from \"react\";\nimport FocusDuration from \"./FocusDuration\";\nimport BreakDuration from \"./BreakDuration\";\nimport DemoSettings from \"./DemoSettings\";\n\nfunction Setup({\n  decrement,\n  increment,\n  displayDuration,\n  breakDuration,\n  focusDuration,\n  currentMode,\n  demoSettings,\n}) {\n  return (\n    <div className=\"row\">\n      <FocusDuration\n        decrement={decrement}\n        increment={increment}\n        displayDuration={displayDuration}\n        currentMode={currentMode}\n        focusDuration={focusDuration}\n      />\n      <DemoSettings demoSettings={demoSettings} currentMode={currentMode} />\n      <BreakDuration\n        decrement={decrement}\n        increment={increment}\n        displayDuration={displayDuration}\n        currentMode={currentMode}\n        breakDuration={breakDuration}\n      />\n    </div>\n  );\n}\n\nexport default Setup;\n","import React from \"react\";\nimport classNames from \"../utils/class-names\";\n\nfunction Controls({ playPause, isTimerRunning, stopTimer, currentMode }) {\n  return (\n    <div className=\"row\">\n      <div className=\"col\">\n        <div\n          className=\"btn-group btn-group-lg mb-2\"\n          role=\"group\"\n          aria-label=\"Timer controls\"\n        >\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            data-testid=\"play-pause\"\n            title=\"Start or pause timer\"\n            onClick={playPause}\n          >\n            <span\n              className={classNames({\n                oi: true,\n                \"oi-media-play\": !isTimerRunning,\n                \"oi-media-pause\": isTimerRunning,\n              })}\n            />\n          </button>\n\n          <button\n            type=\"button\"\n            className=\"btn btn-secondary\"\n            data-testid=\"stop\"\n            title=\"Stop the session\"\n            disabled={!currentMode}\n            onClick={stopTimer}\n          >\n            <span className=\"oi oi-media-stop\" />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Controls;\n","/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","import React from \"react\";\n\nfunction Feedback({\n  isTimerRunning,\n  displayDuration,\n  remainingTime,\n  currentMode,\n  focusDuration,\n  breakDuration,\n}) {\n  const status = currentMode === \"focusing\" ? \"Focusing\" : \"On Break\";\n  const duration = currentMode === \"focusing\" ? focusDuration : breakDuration;\n  const remainingDuration = displayDuration(remainingTime);\n  const isPaused = !isTimerRunning ? \"Paused\" : \"~~>\";\n  const progress = (1 - remainingTime / duration) * 100;\n  const durationTimeUnit = duration === 60 ? \"minute\" : (duration < 60 ? \"seconds\" : \"minutes\");\n\n  return (\n    // This area only shows when a focus or break session is running or paused\n    currentMode && (\n      <div>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <h2 data-testid=\"session-title\">\n              {status} for {displayDuration(duration)} {durationTimeUnit}\n            </h2>\n            <p className=\"lead\" data-testid=\"session-sub-title\">\n              {remainingDuration} remaining\n            </p>\n            <h2>{isPaused}</h2>\n          </div>\n        </div>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <div className=\"progress\" style={{ height: \"20px\" }}>\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                aria-valuenow={progress}\n                style={{ width: `${progress}%` }}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  );\n}\n\nexport default Feedback;\n","import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport { secondsToDuration, minutesToDuration } from \"../utils/duration\";\nimport Setup from \"../setup/Setup\";\nimport Controls from \"../controls/Controls\";\nimport Feedback from \"../feedback/Feedback\";\n\nfunction Pomodoro() {\n  //TODO (1) improvements: currentMode could be absorbed into each of focusDuration and breakDuration as {active: boolean}. this would fix propTypes as well. If i DON'T do this, then do \"todo (2)\"\n  //TODO (2) propType for currentMode could be a string, and set default state as null instead of false. That way i'm not mixing up types (will always be a string after taken out of its default null)\n  const [timerState, setTimerState] = useState({\n    focusDuration: { set: 1500, min: 300, max: 3600 },\n    breakDuration: { set: 300, min: 60, max: 900 },\n    currentMode: false,\n    remainingTime: null,\n  });\n  //Destructuring\n  const { remainingTime, currentMode } = timerState;\n  const focusDuration = timerState[\"focusDuration\"].set;\n  const breakDuration = timerState[\"breakDuration\"].set;\n\n  //! isTimerRunning was provided by starter code, might absorb into timerState later if it doesn't affect Qualified tests and I can figure out using prevState on nested object\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n\n  function limitAdjust(newTime, min, max) {\n    return newTime < min ? min : newTime > max ? max : newTime;\n  }\n\n  function adjust(mode, adjustBy) {\n    const newTime = timerState[mode].set + adjustBy;\n\n    setTimerState({\n      ...timerState,\n      [mode]: {\n        ...timerState[mode],\n        set: limitAdjust(newTime, timerState[mode].min, timerState[mode].max),\n      },\n    });\n  }\n\n  function displayDuration(duration) {\n    return duration >= 3600\n      ? minutesToDuration(duration / 60)\n      : secondsToDuration(duration);\n  }\n\n  //* logic for mode = focusing\n  // \"focusing\"\" === focusing // returns true\n  // true &&  breaking // both truthy, returns right side: \"breaking\"\n  // next step is now  \"breaking\" || \"focusing\" //  truthy or truthy returns left side because it is short circuited and doesn't even read the right side, so returns the final result: \"breaking\"\n\n  ///*logic for mode = breaking\n  //  \"breaking\" === focusing // returns false\n  // causes short-circuit, moves on to:\n  // false || focusing // (false or truthy) is false, and therefore will return the right side / truthy value, so final result is \"focusing\"\n  function toggleMode(mode, focusing, breaking) {\n    return (mode === focusing && breaking) || focusing;\n  }\n\n  useInterval(\n    () => {\n      // countdown\n      if (remainingTime > 0) {\n        setTimerState({\n          ...timerState,\n          [\"remainingTime\"]: remainingTime - 1,\n        });\n      }\n\n      // Play alarm and switch modes\n      if (remainingTime === 0) {\n        new Audio(`https://bigsoundbank.com/UPLOAD/mp3/2261.mp3`).play();\n\n        const otherMode = toggleMode(currentMode, \"focusing\", \"breaking\");\n\n        const otherDuration =\n          otherMode == \"focusing\" ? focusDuration : breakDuration;\n\n        setTimerState({\n          ...timerState,\n          [\"currentMode\"]: otherMode,\n          [\"remainingTime\"]: otherDuration,\n        });\n      }\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  function playPause() {\n    // Initial press of play\n    if (!currentMode) {\n      setIsTimerRunning((prevState) => !prevState);\n      setTimerState({\n        ...timerState,\n        [\"currentMode\"]: \"focusing\",\n        [\"remainingTime\"]: focusDuration,\n      });\n    }\n    // toggle play/pause during active mode\n    if (currentMode) {\n      setIsTimerRunning((prevState) => !prevState);\n    }\n  }\n\n  function stopTimer() {\n    setIsTimerRunning(false);\n    setTimerState({\n      ...timerState,\n      [\"currentMode\"]: false,\n    });\n  }\n\n  function demoSettings() {\n    if (timerState[\"focusDuration\"].min > 100) {\n      setTimerState({\n        ...timerState,\n        focusDuration: { set: 5, min: 3, max: 10 },\n        breakDuration: { set: 3, min: 2, max: 5 },\n      });\n    } else {\n      setTimerState({\n        ...timerState,\n        focusDuration: { set: 1500, min: 300, max: 3600 },\n        breakDuration: { set: 300, min: 60, max: 900 },\n      });\n    }\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <Setup\n        decrement={adjust}\n        increment={adjust}\n        displayDuration={displayDuration}\n        focusDuration={focusDuration}\n        breakDuration={breakDuration}\n        currentMode={currentMode}\n        demoSettings={demoSettings}\n        isTimerRunning={isTimerRunning}\n      />\n      <Controls\n        isTimerRunning={isTimerRunning}\n        playPause={playPause}\n        currentMode={currentMode}\n        stopTimer={stopTimer}\n      />\n      <Feedback\n        isTimerRunning={isTimerRunning}\n        displayDuration={displayDuration}\n        remainingTime={remainingTime}\n        currentMode={currentMode}\n        focusDuration={focusDuration}\n        breakDuration={breakDuration}\n      />\n    </div>\n  );\n}\n\nexport default Pomodoro;\n","/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}